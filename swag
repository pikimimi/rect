import React, { useState, useRef, useEffect } from 'react';
import { Slider } from '@/components/ui/slider';
import { Twitter, Linkedin, Instagram } from 'lucide-react';

const VinylImageConverter = () => {
  const [image, setImage] = useState(null);
  const [isSpinning, setIsSpinning] = useState(false);
  const [spinSpeed, setSpinSpeed] = useState(5);
  const [borderColor, setBorderColor] = useState('#b19cd9');
  const [borderWidth, setBorderWidth] = useState(10);
  const [centerDotSize, setCenterDotSize] = useState(10);
  const [centerDotColor, setCenterDotColor] = useState('#ffffff');
  const [labelSize, setLabelSize] = useState(80);
  const [labelColor, setLabelColor] = useState('#f0f0f0');
  const [labelTransparency, setLabelTransparency] = useState(1);

  const fileInputRef = useRef(null);
  const spinnerRef = useRef(null);

  const imageSize = 256;

  useEffect(() => {
    if (spinnerRef.current) {
      spinnerRef.current.style.animation = isSpinning ? `spin ${11 - spinSpeed}s linear infinite` : 'none';
    }
  }, [isSpinning, spinSpeed]);

  const handleImageUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => setImage(e.target.result);
      reader.readAsDataURL(file);
    }
  };

  const handleDownload = () => {
    if (!image) return;

    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    canvas.width = imageSize + 2 * borderWidth;
    canvas.height = imageSize + 2 * borderWidth;

    ctx.fillStyle = borderColor;
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    const img = new Image();
    img.src = image;
    img.onload = () => {
      ctx.drawImage(img, borderWidth, borderWidth, imageSize, imageSize);

      ctx.fillStyle = labelColor;
      ctx.globalAlpha = labelTransparency;
      ctx.beginPath();
      ctx.arc(canvas.width / 2, canvas.height / 2, labelSize / 2, 0, Math.PI * 2);
      ctx.fill();

      ctx.globalAlpha = 1;

      ctx.fillStyle = centerDotColor;
      ctx.beginPath();
      ctx.arc(canvas.width / 2, canvas.height / 2, centerDotSize / 2, 0, Math.PI * 2);
      ctx.fill();

      const link = document.createElement('a');
      link.download = 'vinyl-image.png';
      link.href = canvas.toDataURL();
      link.click();
    };
  };

  return (
    <div className="container mx-auto p-4 max-w-md border-4 border-purple-400 rounded-lg">
      <style>
        {`
          @import url('https://fonts.googleapis.com/css2?family=SF+Pro+Display:wght@400;700&display=swap');

          body {
            font-family: 'SF Pro Display', sans-serif;
          }

          @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
          }
          .custom-slider {
            @apply h-1 w-full cursor-pointer appearance-none rounded-full bg-gray-200;
          }
          .custom-slider::-webkit-slider-thumb {
            @apply appearance-none h-3 w-3 rounded-full bg-purple-500 cursor-pointer transition-all duration-150 ease-in-out;
          }
          .custom-slider::-moz-range-thumb {
            @apply h-3 w-3 rounded-full bg-purple-500 cursor-pointer border-0 transition-all duration-150 ease-in-out;
          }
          .custom-slider::-webkit-slider-thumb:hover {
            @apply bg-purple-600 scale-110;
          }
          .custom-slider::-moz-range-thumb:hover {
            @apply bg-purple-600 scale-110;
          }
        `}
      </style>
      <h1 className="text-2xl font-bold mb-4 text-center text-purple-600" style={{ fontFamily: "'SF Pro Display', sans-serif" }}>
        Sleek Vinyl-Style Spinning Image Converter
      </h1>
      
      <button
        onClick={() => fileInputRef.current.click()}
        className="w-full bg-purple-400 text-white py-2 rounded-full mb-3 font-semibold transition duration-300 ease-in-out hover:bg-purple-500 text-sm"
      >
        CHOOSE AN IMAGE
      </button>
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleImageUpload}
        className="hidden"
        accept="image/*"
      />
      
      <div className="flex justify-between mb-3">
        <button
          onClick={() => setIsSpinning(!isSpinning)}
          className="bg-purple-400 text-white px-4 py-1 rounded-full font-semibold transition duration-300 ease-in-out hover:bg-purple-500 text-sm"
        >
          {isSpinning ? 'STOP SPINNING' : 'START SPINNING'}
        </button>
        <button
          onClick={handleDownload}
          className="bg-purple-400 text-white px-4 py-1 rounded-full font-semibold transition duration-300 ease-in-out hover:bg-purple-500 text-sm"
        >
          DOWNLOAD ANIMATION
        </button>
      </div>

      <div className="relative mx-auto mb-4" style={{
        width: `${imageSize + 2 * borderWidth}px`,
        height: `${imageSize + 2 * borderWidth}px`,
        backgroundColor: borderColor,
      }}>
        <div 
          className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 rounded-full overflow-hidden"
          style={{
            width: `${imageSize}px`,
            height: `${imageSize}px`,
          }}
        >
          <div 
            ref={spinnerRef}
            className="w-full h-full"
            style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
            }}
          >
            {image ? (
              <img
                src={image}
                alt="Uploaded vinyl"
                className="w-full h-full object-cover"
              />
            ) : (
              <div className="w-full h-full bg-gray-200 flex items-center justify-center text-gray-400 text-sm">
                No image
              </div>
            )}
          </div>
          <div 
            className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 rounded-full transition-all duration-300 ease-in-out"
            style={{
              width: `${labelSize}px`,
              height: `${labelSize}px`,
              backgroundColor: labelColor,
              opacity: labelTransparency,
            }}
          ></div>
          <div 
            className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 rounded-full transition-all duration-300 ease-in-out"
            style={{
              width: `${centerDotSize}px`,
              height: `${centerDotSize}px`,
              backgroundColor: centerDotColor,
            }}
          ></div>
        </div>
      </div>

      <div className="mb-2">
        <label className="block mb-1 text-purple-600 font-semibold text-sm">Spinning Speed:</label>
        <Slider
          min={1}
          max={10}
          step={0.1}
          value={[spinSpeed]}
          onValueChange={(value) => setSpinSpeed(value[0])}
          className="custom-slider"
        />
      </div>

      <div className="mb-2">
        <label className="block mb-1 text-purple-600 font-semibold text-sm">Border Color:</label>
        <input
          type="color"
          value={borderColor}
          onChange={(e) => setBorderColor(e.target.value)}
          className="w-8 h-6 rounded cursor-pointer"
        />
      </div>

      <div className="mb-2">
        <label className="block mb-1 text-purple-600 font-semibold text-sm">Border Width:</label>
        <Slider
          min={0}
          max={50}
          step={0.1}
          value={[borderWidth]}
          onValueChange={(value) => setBorderWidth(value[0])}
          className="custom-slider"
        />
      </div>

      <div className="mb-2">
        <label className="block mb-1 text-purple-600 font-semibold text-sm">Label Size:</label>
        <Slider
          min={40}
          max={200}
          step={1}
          value={[labelSize]}
          onValueChange={(value) => setLabelSize(value[0])}
          className="custom-slider"
        />
      </div>

      <div className="mb-2">
        <label className="block mb-1 text-purple-600 font-semibold text-sm">Label Color:</label>
        <input
          type="color"
          value={labelColor}
          onChange={(e) => setLabelColor(e.target.value)}
          className="w-8 h-6 rounded cursor-pointer"
        />
      </div>

      <div className="mb-2">
        <label className="block mb-1 text-purple-600 font-semibold text-sm">Label Transparency:</label>
        <Slider
          min={0}
          max={1}
          step={0.1}
          value={[labelTransparency]}
          onValueChange={(value) => setLabelTransparency(value[0])}
          className="custom-slider"
        />
      </div>

      <div className="mb-2">
        <label className="block mb-1 text-purple-600 font-semibold text-sm">Center Dot Size:</label>
        <Slider
          min={0}
          max={50}
          step={0.1}
          value={[centerDotSize]}
          onValueChange={(value) => setCenterDotSize(value[0])}
          className="custom-slider"
        />
      </div>

      <div className="mb-4">
        <label className="block mb-1 text-purple-600 font-semibold text-sm">Center Dot Color:</label>
        <input
          type="color"
          value={centerDotColor}
          onChange={(e) => setCenterDotColor(e.target.value)}
          className="w-8 h-6 rounded cursor-pointer"
        />
      </div>

      <div className="flex justify-center space-x-4 mb-4">
        <a href="https://twitter.com/yourusername" target="_blank" rel="noopener noreferrer" className="text-purple-500 hover:text-purple-600 transition duration-300">
          <Twitter size={20} />
        </a>
        <a href="https://linkedin.com/in/yourusername" target="_blank" rel="noopener noreferrer" className="text-purple-500 hover:text-purple-600 transition duration-300">
          <Linkedin size={20} />
        </a>
        <a href="https://instagram.com/yourusername" target="_blank" rel="noopener noreferrer" className="text-purple-500 hover:text-purple-600 transition duration-300">
          <Instagram size={20} />
        </a>
      </div>

      <div className="text-center text-sm text-purple-600 mt-4">
        <pre className="font-mono text-xs">
{`
   __    _  _  ____  ____  ____  ____  _  _  ____  ____ 
  /__\\  ( \\( )( ___)(_  _)(  _ \\( ___)( \\/ )(_  _)( ___)
 /(__)\\  )  (  )__)   )(   )   / )__)  \\  /  _)(_  )__) 
(__)(__)(_)\\_)(____)  (__) (_)\\_)(____)  \\/  (____)(____)
                                                        
`}
        </pre>
        Made with love by anetrexic <span className="text-red-500">&hearts;</span>
      </div>
    </div>
  );
};

export default VinylImageConverter;
